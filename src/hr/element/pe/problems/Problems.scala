package hr.element.pe.problems

import hr.element.pe.Solveable
import scala.annotation.tailrec

/**
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
*/
object Problem0001 extends Solveable{
  val NUMBER = 1

  def solve() = {
    val res = ( 1 until 1000 filter( n => ( n % 3 == 0 )  || ( n % 5 == 0 ) ) sum )
    String.valueOf( res )
  }
}

/**
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
*/
object Problem0002 extends Solveable{
  val NUMBER = 2

  def solve() = {
   @tailrec
    def fibSumEven( cur: Long, prev: Long, sum: Long, max: Long ):Long = {
      ( cur > max ) match{
        case true =>
          sum
        case false =>
          fibSumEven(
              cur = cur + prev,
              prev = cur,
              sum = if ( ( cur & 1 ) == 0 ) sum + cur else sum,
              max = max
          )
      }
    }

    val res = fibSumEven( 1, 1, 0, 4000000 )
    String.valueOf( res )
  }
}

/**
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
object Problem0003 extends Solveable{
  val NUMBER = 3

  def solve() = {

    @tailrec
    def maxPrime( cur: Int, num: Long, max: Option[Int] ):Int = {
      ( cur > num ) match {
        case true =>
          max.getOrElse( 1 )
        case false =>
          num % cur == 0 match {
            case true =>
              maxPrime( cur, num / cur, Some( cur ) )
            case false =>
              maxPrime( cur + 1, num, max )
          }
      }
    }

    val res = maxPrime( 2, 600851475143L, None )
    String.valueOf( res )
  }
}

/**
  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
object Problem0004 extends Solveable{
  val NUMBER = 4

  def solve() = {
    def numPal( p: Long ) = p.toString == p.toString.reverse

    def findMaxPal( from: Int, to: Int ) = {
      val rng = from to to
      ( for( x <- rng; y <- rng if numPal( x * y ) ) yield x * y ) max
    }

    val res = findMaxPal( 100, 999 )
    String.valueOf( res )
  }
}

/**
  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
object Problem0005 extends Solveable{
  val NUMBER = 5

  def solve() = {

    def getPrimCount( num: Int ) = {
      @tailrec
      def getPrim( n: Int, cur: Int ):List[Int] = {
        cur match {
          case x if ( x >= n ) =>
            n :: Nil
          case x if ( n % x == 0 ) =>
            x :: getPrim( n / x, x )
          case x =>
            getPrim( n, x + 1 )
        }
      }

      getPrim( num, 2 ) groupBy( identity ) mapValues( _.length )
    }

    def getMaxPrimCounts( r: Range ) =
      r flatMap getPrimCount groupBy( _._1 ) mapValues( _.map(_._2).max )

    val res = (getMaxPrimCounts( 1 to 20 ) map( ep => BigInt( ep._1 ).pow( ep._2 ) ) product)
    String.valueOf( res )
  }
}

/**
  The sum of the squares of the first ten natural numbers is, 1^(2) + 2^(2) + ... + 10^(2) = 385
  The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^(2) = 55^(2) = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
object Problem0006 extends Solveable{
  val NUMBER = 6

  def solve() = {

    def sumSqList( numList: Seq[Int] ):Long = numList map( n => n*n ) sum
    def sqListSum( numList: Seq[Int] ):Long = BigInt( numList sum ).pow(2).toLong

    val rng = 1 to 100
    val delta = sumSqList( rng ) - sqListSum( rng )

    val res = math.abs( delta )
    String.valueOf( res )
  }
}

/**
  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10001st prime number?
*/
object Problem0007 extends Solveable{
  val NUMBER = 7

  def solve() = {

    def findNthPrime( n: Int ) = {

      import scala.collection.mutable.Queue

      @tailrec
      def findNthPrime( cur: Int, primesSoFar: Queue[Int] ):Int = {
        val isPrime = primesSoFar.forall( cur % _ != 0 )
        isPrime match {
          case true =>
            if ( primesSoFar.size + 1 == n ) {
              cur
            }
            else{
              findNthPrime( cur + 1, primesSoFar += cur )
            }
          case false =>
            findNthPrime( cur + 1, primesSoFar )
        }
      }

      findNthPrime( 2, new Queue[Int]() )
    }

    val res = findNthPrime( 10001 )
    String.valueOf( res )
  }
}

/**
Find the greatest product of five consecutive digits in the 1000-digit number.

7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
*/
object Problem0008 extends Solveable{
  val NUMBER = 8

  def solve() = {

    val num = """
      7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
      8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
      6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
      3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
      6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
      5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
      8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
      1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
      0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
      0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    """.replaceAll( "\\D", "" )

    val res = (num.toList.map(Character.digit(_,10)).sliding(5) map( _.product) max)
    String.valueOf( res )
  }
}

/**
  A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2
  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
  There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.
*/
object Problem0009 extends Solveable{
  val NUMBER = 9

  def solve() = {
    val res = "?"
    String.valueOf( res )
  }
}






























