package hr.element.pe.problems

import hr.element.pe.Solveable

object Problem0001 extends Solveable{
  val NUMBER = 1

  def solve() = {
/*
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
*/
    val res = ( 1 until 1000 filter( n => ( n % 3 == 0 )  || ( n % 5 == 0 ) ) sum )
    String.valueOf( res )
  }
}

import scala.annotation.tailrec

object Problem0002 extends Solveable{
  val NUMBER = 2

  def solve() = {
/*
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
*/

   @tailrec
    def fib( cur: Long, prev: Long, index: Int, sum: Long, max: Long ):Long = {
      if ( cur > max ) {
        sum
      }
      else {
        fib( cur + prev, cur, index + 1, if ( ( cur & 1 ) == 0 ) sum + cur else sum, max )
      }
    }

    val res = fib( 1, 1, 1, 0, 4000000 )
    String.valueOf( res )
  }
}

