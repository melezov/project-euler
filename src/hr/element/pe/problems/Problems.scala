package hr.element.pe.problems

import scala.annotation.tailrec
import scala.collection.mutable.{ArrayBuffer, HashMap}
import scala.collection.immutable.{Vector}

import org.joda.time.{LocalDate, DateTimeConstants}

import org.apache.commons.io.FileUtils
import java.io.File

import hr.element.pe.Solveable

/**
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we
    get 3, 5, 6 and 9.
  The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5
    below 1000.
*/
object Problem0001 extends Solveable{
  val NUMBER = 1

/**
  See explanation of view:
  http://www.scala-lang.org/docu/files/collections-api/collections_42.html
*/
  def solve() = {

    val res = (1 until 1000).view
      .filter( n => ( n % 3 == 0 ) || ( n % 5 == 0 ) ).sum
    String.valueOf( res )
  }
}

/**
  Each new term in the Fibonacci sequence is generated by adding the previous
    two terms.

  By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
    four million, find the sum of the even-valued terms.
*/
object Problem0002 extends Solveable{
  val NUMBER = 2
/**
  Demonstration of named parameter usage ( prev = cur )
*/
  def solve() = {

    @tailrec
    def fibSumEven( cur: Long, prev: Long, sum: Long, max: Long ):Long = {
      ( cur > max ) match{
        case true =>
          sum
        case false =>
          fibSumEven(
              cur = cur + prev,
              prev = cur,
              sum = if ( ( cur & 1 ) == 0 ) sum + cur else sum,
              max = max
          )
      }
    }

    val res = fibSumEven( 1, 1, 0, 4000000 )
    String.valueOf( res )
  }
}

/**
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
object Problem0003 extends Solveable{
  val NUMBER = 3

  def solve() = {

    @tailrec
    def maxPrime( cur: Int, num: Long, max: Option[Int] ):Int = {
      ( cur > num ) match {
        case true =>
          max.getOrElse( 1 )
        case false =>
          num % cur == 0 match {
            case true =>
              maxPrime( cur, num / cur, Some( cur ) )
            case false =>
              maxPrime( cur + 1, num, max )
          }
      }
    }

    val res = maxPrime( 2, 600851475143L, None )
    String.valueOf( res )
  }
}

/**
  A palindromic number reads the same both ways. The largest palindrome made
    from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
object Problem0004 extends Solveable{
  val NUMBER = 4

  def solve() = {

    def numPal( p: Long ) = {
      val s = p.toString
      s.reverse == s
    }

    def findMaxPal( start: Int, end: Int ) = {
      val rng = start to end
      ( for( x <- rng; y <- rng if numPal( x * y ) ) yield x * y ) max
    }

    val res = findMaxPal( 100, 999 )
    String.valueOf( res )
  }
}

/**
  2520 is the smallest number that can be divided by each of the numbers from 1
    to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the
    numbers from 1 to 20?
*/
object Problem0005 extends Solveable{
  val NUMBER = 5

  def getPrimCount( num: Int ) = {
    @tailrec
    def getPrim( n: Int, cur: Int ):List[Int] = {
      cur match {
        case x if ( x >= n ) =>
          n :: Nil
        case x if ( n % x == 0 ) =>
          x :: getPrim( n / x, x )
        case x =>
          getPrim( n, x + 1 )
      }
    }

    Map.empty ++ getPrim( num, 2 ).groupBy( identity ).mapValues( _.length )
  }

  def solve() = {
    def getMaxPrimCounts( r: Range ) =
      r flatMap getPrimCount groupBy( _._1 ) mapValues( _.map(_._2).max )

    val res = (getMaxPrimCounts( 1 to 20 )
      map( ep => BigInt( ep._1 ).pow( ep._2 ) ) product)
    String.valueOf( res )
  }
}

/**
  The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385
  The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)^2 = 55^2 = 3025
  Hence the difference between the sum of the squares of the first ten natural
    numbers and the square of the sum is 3025 − 385 = 2640.
  Find the difference between the sum of the squares of the first one hundred
    natural numbers and the square of the sum.
*/
object Problem0006 extends Solveable{
  val NUMBER = 6

  def solve() = {

    def sumSqList( numList: Seq[Int] ):Long = numList map( n => n*n ) sum
    def sqListSum( numList: Seq[Int] ):Long = BigInt( numList sum ).pow(2).toLong

    val rng = 1 to 100
    val delta = sumSqList( rng ) - sqListSum( rng )

    val res = math.abs( delta )
    String.valueOf( res )
  }
}

/**
  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
    that the 6th prime is 13.
  What is the 10001st prime number?
*/
object Problem0007 extends Solveable{
  val NUMBER = 7

  def solve() = {

    def findNthPrime( n: Int ) = {
      @tailrec
      def findNthPrime( cur: Int, primesSoFar: ArrayBuffer[Int] ):Int = {
        val isPrime = primesSoFar.forall( cur % _ != 0 )
        isPrime match {
          case true =>
            if ( primesSoFar.size + 1 == n ) {
              cur
            }
            else{
              findNthPrime( cur + 1, primesSoFar += cur )
            }
          case false =>
            findNthPrime( cur + 1, primesSoFar )
        }
      }

      findNthPrime( 2, new ArrayBuffer[Int](n) )
    }

    val res = findNthPrime( 10001 )
    String.valueOf( res )
  }
}

/**
Find the greatest product of five consecutive digits in the 1000-digit number.

7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
*/
object Problem0008 extends Solveable{
  val NUMBER = 8

/**
  Usage of "sliding"
 */
  def solve() = {

    val num = """
      7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
      8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
      6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
      3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
      6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
      5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
      8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
      1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
      0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
      0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    """.replaceAll( "\\D", "" )

    val res = (num.toList.map(_.asDigit).sliding(5).map( _.product).max)
    String.valueOf( res )
  }
}

/**
  A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    a^2 + b^2 = c^2
  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
  There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find
    the product abc.
*/
object Problem0009 extends Solveable{
  val NUMBER = 9

  def solve() = {

    def seekPitSum( sum: Int ) = {

      @tailrec
      def seekPit( a: Int, b: Int ):Long = {
        val c = sum - a - b
        if ( b < c ){
          if ( a*a + b*b == c*c ) {
            a*b*c
          }
          else{
            seekPit( a, b+1 )
          }
        }
        else{
          if ( a == sum ) error( "No solution can be found!" )
          seekPit( a+1, a+2 )
        }
      }

      seekPit( 1, 2 )
    }

    val res = seekPitSum( 1000 )
    String.valueOf( res )
  }
}

/**
  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*/
object Problem0010 extends Solveable{
  val NUMBER = 10

  def getPrimes( limit: Int ):scala.collection.BitSet = {
    import scala.collection.mutable.BitSet
    val primes = new BitSet() ++ (2 until limit)

    for( cur <- 2 until math.sqrt( limit ).toInt+1 if ( primes.contains(cur) )){
      for( es <- ( cur << 1 ) until limit by cur ) primes -= es
    }

    primes
  }

  def solve() = {

    def sumPrimes( limit: Int ) = {
      getPrimes( limit ).foldLeft(0L){_+_}
    }

    val res = sumPrimes( 2000000 )
    String.valueOf( res )
  }
}

/**
  In the 20×20 grid below, four numbers along a diagonal line have been marked
    in red.

  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
  32 98 81 28 64 23 67 10[26]38 40 67 59 54 70 66 18 38 64 70
  67 26 20 68 02 62 12 20 95[63]94 39 63 08 40 91 66 49 94 21
  24 55 58 05 66 73 99 26 97 17[78]78 96 83 14 88 34 89 63 72
  21 36 23 09 75 00 76 44 20 45 35[14]00 61 33 97 34 31 33 95
  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
  What is the greatest product of four adjacent numbers in any direction (up,
    down, left, right, or diagonally) in the 20×20 grid?
*/
object Problem0011 extends Solveable{
  val NUMBER = 11

  def solve() = {

    val field = """
      08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
      49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
      81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
      52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
      22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
      24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
      32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
      67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
      24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
      21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
      78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
      16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
      86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
      19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
      04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
      88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
      04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
      20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
      20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
      01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    """
      .split( "[\\r\\n]+" ).map( _.trim ).filter( !_.isEmpty )
      .map( _.split( ' ' ).map( _.toInt ) toList ) toList

    val paddedField = {
      val padCol = List.fill(3){1}
      val padBlock = List.fill(3){List.fill(20){1}}
      field ::: padBlock map( _ ::: padCol )
    }

    val res = (paddedField sliding(4) map { rW =>
      (for( x <- 0 until 20 ) yield {
        val hMul = rW(0) drop(x) take(4) product
        val vMul = rW.map( _(x) ) product
        val dBsMul = (for( i <- 0 to 3 ) yield rW(i)(x+i)) product
        val dSlMul = (for( i <- 0 to 3 ) yield rW(3-i)(x+i)) product

        List( hMul, vMul, dBsMul, dSlMul ) max
      }) max
    } toList) max

    String.valueOf( res )
  }
}

/**
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
  The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.
  What is the value of the first triangle number to have over five hundred
    divisors?
*/
object Problem0012 extends Solveable{
  val NUMBER = 12

  def solve() = {

    def getFactorCount( num: Int ) = {
      Problem0005.getPrimCount( num ).map( _._2 + 1 ).product
    }

    @tailrec
    def getTriangleWithMoreThanNDivs( cur: Int, index: Int, n: Int ):Int = {
      if ( getFactorCount( cur ) > n ){
        cur
      }
      else {
        getTriangleWithMoreThanNDivs(
            cur = cur + index,
            index = index + 1,
            n = n
        )
      }
    }

    val res = getTriangleWithMoreThanNDivs( 1, 2, 500 )
    String.valueOf( res )
  }
}

/**
  Work out the first ten digits of the sum of the following one-hundred 50-digit
    numbers.

  37107287533902102798797998220837590246510135740250
  46376937677490009712648124896970078050417018260538
  74324986199524741059474233309513058123726617309629
  91942213363574161572522430563301811072406154908250
  23067588207539346171171980310421047513778063246676
  89261670696623633820136378418383684178734361726757
  28112879812849979408065481931592621691275889832738
  44274228917432520321923589422876796487670272189318
  47451445736001306439091167216856844588711603153276
  70386486105843025439939619828917593665686757934951
  62176457141856560629502157223196586755079324193331
  64906352462741904929101432445813822663347944758178
  92575867718337217661963751590579239728245598838407
  58203565325359399008402633568948830189458628227828
  80181199384826282014278194139940567587151170094390
  35398664372827112653829987240784473053190104293586
  86515506006295864861532075273371959191420517255829
  71693888707715466499115593487603532921714970056938
  54370070576826684624621495650076471787294438377604
  53282654108756828443191190634694037855217779295145
  36123272525000296071075082563815656710885258350721
  45876576172410976447339110607218265236877223636045
  17423706905851860660448207621209813287860733969412
  81142660418086830619328460811191061556940512689692
  51934325451728388641918047049293215058642563049483
  62467221648435076201727918039944693004732956340691
  15732444386908125794514089057706229429197107928209
  55037687525678773091862540744969844508330393682126
  18336384825330154686196124348767681297534375946515
  80386287592878490201521685554828717201219257766954
  78182833757993103614740356856449095527097864797581
  16726320100436897842553539920931837441497806860984
  48403098129077791799088218795327364475675590848030
  87086987551392711854517078544161852424320693150332
  59959406895756536782107074926966537676326235447210
  69793950679652694742597709739166693763042633987085
  41052684708299085211399427365734116182760315001271
  65378607361501080857009149939512557028198746004375
  35829035317434717326932123578154982629742552737307
  94953759765105305946966067683156574377167401875275
  88902802571733229619176668713819931811048770190271
  25267680276078003013678680992525463401061632866526
  36270218540497705585629946580636237993140746255962
  24074486908231174977792365466257246923322810917141
  91430288197103288597806669760892938638285025333403
  34413065578016127815921815005561868836468420090470
  23053081172816430487623791969842487255036638784583
  11487696932154902810424020138335124462181441773470
  63783299490636259666498587618221225225512486764533
  67720186971698544312419572409913959008952310058822
  95548255300263520781532296796249481641953868218774
  76085327132285723110424803456124867697064507995236
  37774242535411291684276865538926205024910326572967
  23701913275725675285653248258265463092207058596522
  29798860272258331913126375147341994889534765745501
  18495701454879288984856827726077713721403798879715
  38298203783031473527721580348144513491373226651381
  34829543829199918180278916522431027392251122869539
  40957953066405232632538044100059654939159879593635
  29746152185502371307642255121183693803580388584903
  41698116222072977186158236678424689157993532961922
  62467957194401269043877107275048102390895523597457
  23189706772547915061505504953922979530901129967519
  86188088225875314529584099251203829009407770775672
  11306739708304724483816533873502340845647058077308
  82959174767140363198008187129011875491310547126581
  97623331044818386269515456334926366572897563400500
  42846280183517070527831839425882145521227251250327
  55121603546981200581762165212827652751691296897789
  32238195734329339946437501907836945765883352399886
  75506164965184775180738168837861091527357929701337
  62177842752192623401942399639168044983993173312731
  32924185707147349566916674687634660915035914677504
  99518671430235219628894890102423325116913619626622
  73267460800591547471830798392868535206946944540724
  76841822524674417161514036427982273348055556214818
  97142617910342598647204516893989422179826088076852
  87783646182799346313767754307809363333018982642090
  10848802521674670883215120185883543223812876952786
  71329612474782464538636993009049310363619763878039
  62184073572399794223406235393808339651327408011116
  66627891981488087797941876876144230030984490851411
  60661826293682836764744779239180335110989069790714
  85786944089552990653640447425576083659976645795096
  66024396409905389607120198219976047599490197230297
  64913982680032973156037120041377903785566085089252
  16730939319872750275468906903707539413042652315011
  94809377245048795150954100921645863754710598436791
  78639167021187492431995700641917969777599028300699
  15368713711936614952811305876380278410754449733078
  40789923115535562561142322423255033685442488917353
  44889911501440648020369068063960672322193204149535
  41503128880339536053299340368006977710650566631954
  81234880673210146739058568557934581403627822703280
  82616570773948327592232845941706525094512325230608
  22918802058777319719839450180888072429661980811197
  77158542502016545090413245809786882778948721859617
  72107838435069186155435662884062257473692284509516
  20849603980134001723930671666823555245252804609722
  53503534226472524250874054075591789781264330331690
*/
object Problem0013 extends Solveable{
  val NUMBER = 13

  def solve() = {
    val num = """
      37107287533902102798797998220837590246510135740250
      46376937677490009712648124896970078050417018260538
      74324986199524741059474233309513058123726617309629
      91942213363574161572522430563301811072406154908250
      23067588207539346171171980310421047513778063246676
      89261670696623633820136378418383684178734361726757
      28112879812849979408065481931592621691275889832738
      44274228917432520321923589422876796487670272189318
      47451445736001306439091167216856844588711603153276
      70386486105843025439939619828917593665686757934951
      62176457141856560629502157223196586755079324193331
      64906352462741904929101432445813822663347944758178
      92575867718337217661963751590579239728245598838407
      58203565325359399008402633568948830189458628227828
      80181199384826282014278194139940567587151170094390
      35398664372827112653829987240784473053190104293586
      86515506006295864861532075273371959191420517255829
      71693888707715466499115593487603532921714970056938
      54370070576826684624621495650076471787294438377604
      53282654108756828443191190634694037855217779295145
      36123272525000296071075082563815656710885258350721
      45876576172410976447339110607218265236877223636045
      17423706905851860660448207621209813287860733969412
      81142660418086830619328460811191061556940512689692
      51934325451728388641918047049293215058642563049483
      62467221648435076201727918039944693004732956340691
      15732444386908125794514089057706229429197107928209
      55037687525678773091862540744969844508330393682126
      18336384825330154686196124348767681297534375946515
      80386287592878490201521685554828717201219257766954
      78182833757993103614740356856449095527097864797581
      16726320100436897842553539920931837441497806860984
      48403098129077791799088218795327364475675590848030
      87086987551392711854517078544161852424320693150332
      59959406895756536782107074926966537676326235447210
      69793950679652694742597709739166693763042633987085
      41052684708299085211399427365734116182760315001271
      65378607361501080857009149939512557028198746004375
      35829035317434717326932123578154982629742552737307
      94953759765105305946966067683156574377167401875275
      88902802571733229619176668713819931811048770190271
      25267680276078003013678680992525463401061632866526
      36270218540497705585629946580636237993140746255962
      24074486908231174977792365466257246923322810917141
      91430288197103288597806669760892938638285025333403
      34413065578016127815921815005561868836468420090470
      23053081172816430487623791969842487255036638784583
      11487696932154902810424020138335124462181441773470
      63783299490636259666498587618221225225512486764533
      67720186971698544312419572409913959008952310058822
      95548255300263520781532296796249481641953868218774
      76085327132285723110424803456124867697064507995236
      37774242535411291684276865538926205024910326572967
      23701913275725675285653248258265463092207058596522
      29798860272258331913126375147341994889534765745501
      18495701454879288984856827726077713721403798879715
      38298203783031473527721580348144513491373226651381
      34829543829199918180278916522431027392251122869539
      40957953066405232632538044100059654939159879593635
      29746152185502371307642255121183693803580388584903
      41698116222072977186158236678424689157993532961922
      62467957194401269043877107275048102390895523597457
      23189706772547915061505504953922979530901129967519
      86188088225875314529584099251203829009407770775672
      11306739708304724483816533873502340845647058077308
      82959174767140363198008187129011875491310547126581
      97623331044818386269515456334926366572897563400500
      42846280183517070527831839425882145521227251250327
      55121603546981200581762165212827652751691296897789
      32238195734329339946437501907836945765883352399886
      75506164965184775180738168837861091527357929701337
      62177842752192623401942399639168044983993173312731
      32924185707147349566916674687634660915035914677504
      99518671430235219628894890102423325116913619626622
      73267460800591547471830798392868535206946944540724
      76841822524674417161514036427982273348055556214818
      97142617910342598647204516893989422179826088076852
      87783646182799346313767754307809363333018982642090
      10848802521674670883215120185883543223812876952786
      71329612474782464538636993009049310363619763878039
      62184073572399794223406235393808339651327408011116
      66627891981488087797941876876144230030984490851411
      60661826293682836764744779239180335110989069790714
      85786944089552990653640447425576083659976645795096
      66024396409905389607120198219976047599490197230297
      64913982680032973156037120041377903785566085089252
      16730939319872750275468906903707539413042652315011
      94809377245048795150954100921645863754710598436791
      78639167021187492431995700641917969777599028300699
      15368713711936614952811305876380278410754449733078
      40789923115535562561142322423255033685442488917353
      44889911501440648020369068063960672322193204149535
      41503128880339536053299340368006977710650566631954
      81234880673210146739058568557934581403627822703280
      82616570773948327592232845941706525094512325230608
      22918802058777319719839450180888072429661980811197
      77158542502016545090413245809786882778948721859617
      72107838435069186155435662884062257473692284509516
      20849603980134001723930671666823555245252804609722
      53503534226472524250874054075591789781264330331690
    """.split( "[\\r\\n]+" ).map( _.trim ).filter( !_.isEmpty )

    val res = ((num.view.map( BigInt(_) ) sum) toString) substring( 0, 10 )
    String.valueOf( res )
  }
}

/**
  The following iterative sequence is defined for the set of positive integers:

  n -> n/2 (n is even)
  n -> 3n + 1 (n is odd)

  Using the rule above and starting with 13, we generate the following sequence:
  13 40 20 10 5 16 8 4 2 1

  It can be seen that this sequence (starting at 13 and finishing at 1) contains
    10 terms.
  Although it has not been proved yet (Collatz Problem), it is thought that all
    starting numbers finish at 1.

  Which starting number, under one million, produces the longest chain?
  NOTE: Once the chain starts the terms are allowed to go above one million.
*/
object Problem0014 extends Solveable{
  val NUMBER = 14

  def solve() = {

    def getMaxChainLength( limit: Int ) = {

      @tailrec
      def resolveChainJump( n: Long, len: Int ):Int = n match {
        case 1 =>
          len
        case x if ( ( x & 1 ) == 0 ) =>
          resolveChainJump( n >> 1, len + 1 )
        case x =>
          resolveChainJump( 3 * x + 1, len + 1 )
      }

      (1 until limit).view.map( n=> resolveChainJump( n, 0 )->n ).max._2
    }

    val res = getMaxChainLength( 1000000 )
    String.valueOf( res )
  }
}

/**
  Starting in the top left corner of a 2x2 grid, there are 6 routes (without
    backtracking) to the bottom right corner.
  How many routes are there through a 20x20 grid?
*/
object Problem0015 extends Solveable{
  val NUMBER = 15

  def calcFact( last: BigInt, index: Int ):Stream[BigInt] = {
    val cur = last * index
    cur #:: calcFact( cur, index+1 )
  }

  lazy val fact = 1 #:: calcFact( 1, 1 )
  def binCoef( n: Int, k: Int ) = fact( n ) / ( fact( k ) * fact( n - k ) )

  def solve() = {
    val res = binCoef( 40, 20 )
    String.valueOf( res )
  }
}

/**
  2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
  What is the sum of the digits of the number 2^1000?
*/
object Problem0016 extends Solveable{
  val NUMBER = 16

  def sumNumberDigits( x: BigInt ) =
    x.toString.map(_.asDigit).sum

  def solve() = {
    val res = sumNumberDigits( BigInt(2) pow 1000 )
    String.valueOf( res )
  }
}

/**
  If the numbers 1 to 5 are written out in words: one, two, three, four, five,
    then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
  If all the numbers from 1 to 1000 (one thousand) inclusive were written out in
    words, how many letters would be used?

  NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and
    forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20
    letters. The use of "and" when writing out numbers is in compliance with
    British usage.
*/
object Problem0017 extends Solveable{
  val NUMBER = 17

  def solve() = {

    val n1To19 =
      ",one,two,three,four,five,six,seven,eight,nine,ten" +
      ",eleven,twelve,thirteen,fourteen,fifteen,sixteen" +
      ",seventeen,eighteen,nineteen" split ','

    val n10To90 =
      ",ten,twenty,thirty,forty,fifty,sixty,seventy,eighty,ninety" split ','

    def num2word( x: Int ) = {
      val ones = x % 10
      val ones20 = x % 20
      val tens = ( x / 10 ) % 10
      val hundreds = ( x / 100 ) % 10
      val thousands = ( x / 1000 ) % 10

      val s1000 = if ( thousands > 0 ){
        n1To19(thousands) + " thousand"
      }
      else ""

      val s100 = if ( hundreds > 0 ){
        n1To19(hundreds) + " hundred"
      }
      else ""

      val s10 = if ( tens > 1 ){
        n10To90(tens)
      }
      else ""

      val s1 = if ( tens == 1 ){
        n1To19(ones20)
      }
      else if ( ones > 0 ){
        n1To19( ones )
      }
      else ""

      val and = if ( ( !s100.isEmpty ) && ( !s10.isEmpty || !s1.isEmpty ) ){
        "and"
      }
      else ""

      List( s1000, s100, and, s10, s1 ).mkString(" ")
        .replaceAll( "\\s+", " " ).trim
    }

    val res = ((1 to 1000).map(num2word)
      .map(_.toList.filter(_.isLetter ).length ) sum)
    String.valueOf( res )
  }
}

/**
  By starting at the top of the triangle below and moving to adjacent numbers on
    the row below, the maximum total from top to bottom is 23.

                [3]
              [7]  4
             2  [4]  6
           8   5  [9]  3

  That is, 3 + 7 + 4 + 9 = 23.

  Find the maximum total from top to bottom of the triangle below:

                                  75
                                95  64
                              17  47  82
                            18  35  87  10
                          20  04  82  47  65
                        19  01  23  75  03  34
                      88  02  77  73  07  63  67
                    99  65  04  28  06  16  70  92
                  41  41  26  56  83  40  80  70  33
                41  48  72  33  47  32  37  16  94  29
              53  71  44  65  25  43  91  52  97  51  14
            70  11  33  28  77  73  17  78  39  68  17  57
          91  71  52  38  17  14  91  43  58  50  27  29  48
        63  66  04  68  89  53  67  30  73  16  69  87  40  31
      04  62  98  27  23  09  70  98  73  93  38  53  60  04  23

  NOTE: As there are only 16384 routes, it is possible to solve this problem by
    trying every route. However, Problem 67, is the same challenge with a
    triangle containing one-hundred rows; it cannot be solved by brute force,
    and requires a clever method! ;o)
*/
object Problem0018 extends Solveable{
  val NUMBER = 18

  trait NodeLike{
    val num:Int

    val leftParent:Option[NodeLike]
    val rightParent:Option[NodeLike]
    val leftChild:Option[NodeLike]
    val rightChild:Option[NodeLike]

    def isRoot = ( leftParent eq None ) && ( rightParent eq None )
    def isLeaf = ( leftChild eq None ) || ( rightChild eq None )
  }

  def asciiArtTriangle2NodeTree( aa: String ) = {
    val l2d = aa.split( "[\\r\\n]+" ).map( _.trim ).filter( !_.isEmpty )
                .map( _.split( " +" ).map( _.toInt ) )

    val nodeMap = new HashMap[(Int,Int),Node]()

    class Node( _num: Int, level: Int, offset: Int ) extends NodeLike{
      val num = _num
      lazy val leftParent:Option[Node] = nodeMap.get( level - 1, offset - 1 )
      lazy val rightParent:Option[Node] = nodeMap.get( level - 1, offset )
      lazy val leftChild:Option[Node] = nodeMap.get( level + 1, offset )
      lazy val rightChild:Option[Node] = nodeMap.get( level + 1 , offset + 1 )
    }

    for ( level <- 0 until l2d.length ){
      val l = l2d(level)
      for ( offset <- 0 until l.length ){
        val num = l(offset)
        nodeMap((level,offset)) = new Node( num, level, offset )
      }
    }

    nodeMap( 0, 0 )
  }

  def solve() = {

    val aaTri = """
                                  75
                                95  64
                              17  47  82
                            18  35  87  10
                          20  04  82  47  65
                        19  01  23  75  03  34
                      88  02  77  73  07  63  67
                    99  65  04  28  06  16  70  92
                  41  41  26  56  83  40  80  70  33
                41  48  72  33  47  32  37  16  94  29
              53  71  44  65  25  43  91  52  97  51  14
            70  11  33  28  77  73  17  78  39  68  17  57
          91  71  52  38  17  14  91  43  58  50  27  29  48
        63  66  04  68  89  53  67  30  73  16  69  87  40  31
      04  62  98  27  23  09  70  98  73  93  38  53  60  04  23
    """

    val root = asciiArtTriangle2NodeTree( aaTri )

    def findBestRoute( cur: NodeLike ): Int = cur.isLeaf match {
      case true =>
        cur.num
      case false =>
        cur.num + math.max(
            findBestRoute( cur.leftChild.get ),
            findBestRoute( cur.rightChild.get )
        )
    }

    val res = findBestRoute( root )
    String.valueOf( res )
  }
}

/**
  You are given the following information, but you may prefer to do some
    research for yourself.

  - 1 Jan 1900 was a Monday.
  - Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.
  - A leap year occurs on any year evenly divisible by 4, but not on a century
      unless it is divisible by 400.

  How many Sundays fell on the first of the month during the twentieth century
    (1 Jan 1901 to 31 Dec 2000)?
*/
object Problem0019 extends Solveable{
  val NUMBER = 19

  def solve() = {

    val firstDays =
      for( year <- 1901 to 2000; month <- 1 to 12 ) yield
        new LocalDate( year, month, 1 )

    val res = firstDays.count( _.getDayOfWeek == DateTimeConstants.SUNDAY )
    String.valueOf( res )
  }
}

/**
  n! means n * (n − 1) * ... * 3 * 2 * 1
  Find the sum of the digits in the number 100!
*/
object Problem0020 extends Solveable{
  val NUMBER = 20

  def solve() = {

    val res = Problem0016.sumNumberDigits( Problem0015.fact( 100 ) )
    String.valueOf( res )
  }
}

/**
  Let d(n) be defined as the sum of proper divisors of n (numbers less than n
    which divide evenly into n).
  If d(a) = b and d(b) = a, where a != b, then a and b are an amicable pair and
    each of a and b are called amicable numbers.

  For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55
    and 110; therefore d(220) = 284.
  The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

  Evaluate the sum of all the amicable numbers under 10000.
*/
object Problem0021 extends Solveable{
  val NUMBER = 21

  def getProperDivisorSum( n: Int ) = {
    if ( n < 2 ){
      0
    }
    else{
      val primCounts = Problem0005.getPrimCount( n )
      primCounts.map{ case (p,c) =>
        ( BigInt( p ).pow( c + 1 ) - 1 ) / ( p - 1 ) toInt }.product - n
    }
  }

  def solve() = {

    def calcAmicablePairSum( limit: Int ) = {
      val dFunCache = (0 until limit).map( getProperDivisorSum )

      (for ( index <- 1 until limit if {
        val sum = dFunCache( index )
        ( index != sum ) && ( sum < limit ) && ( dFunCache( sum ) == index )
      }) yield index) sum
    }

    val res = calcAmicablePairSum( 10000 )
    String.valueOf( res )
  }
}

/**
  Using names.txt, a 46K text file containing over five-thousand first names,
    begin by sorting it into alphabetical order.
  Then working out the alphabetical value for each name, multiply this value by
    its alphabetical position in the list to obtain a name score.

  For example, when the list is sorted into alphabetical order, COLIN, which is
    worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
  So, COLIN would obtain a score of 938 × 53 = 49714.

  What is the total of all the name scores in the file?
*/
object Problem0022 extends Solveable{
  val NUMBER = 22

  private val wordPattern = "^\"([A-Z]+)\"$".r
  def readWords( path: String ) = {
    FileUtils.readFileToString( new File( path ) )
    .split(',')
    .toList
    .map( wordPattern.replaceFirstIn( _, "$1" ) )
  }

  def wordValue( w: String ) = {
    w.map( _ - 'A'+1 ).sum
  }

  def solve() = {

    val names = readWords( "res/Problem0022/names.txt" ).sortBy(identity)

    def wordEval( word: String, pos: Int ) = {
      wordValue( word ) * pos
    }

    val res = names.view.zipWithIndex
      .map( kv => wordEval( kv._1, kv._2 + 1 ) ).sum
    String.valueOf( res )
  }
}

/**
  A perfect number is a number for which the sum of its proper divisors is
    exactly equal to the number.
  For example, the sum of the proper divisors of 28 would be
    1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

  A number n is called deficient if the sum of its proper divisors is less than
    n and it is called abundant if this sum exceeds n.

  As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest
    number that can be written as the sum of two abundant numbers is 24.
  By mathematical analysis, it can be shown that all integers greater than 28123
    can be written as the sum of two abundant numbers.
  However, this upper limit cannot be reduced any further by analysis even
    though it is known that the greatest number that cannot be expressed as the
    sum of two abundant numbers is less than this limit.

  Find the sum of all the positive integers which cannot be written as the sum
    of two abundant numbers.
*/
object Problem0023 extends Solveable{
  val NUMBER = 23

  def solve() = {

    def getNonAbundantSum( limit: Int ) = {
      val abundants = Vector.empty ++ (1 to limit)
        .filter( n => n < Problem0021.getProperDivisorSum( n ) )

      val tests = 0 to limit toArray

      for( a <- 0 until abundants.length ){
        val xa = abundants(a)
        for ( b <- a until abundants.length ){
          val xb = abundants(b)
          val sum = xa + xb
          if ( sum <= limit ) tests( sum ) = 0
        }
      }

      tests.sum
    }

    val res = getNonAbundantSum( 28123 )
    String.valueOf( res )
  }
}

/**
  A permutation is an ordered arrangement of objects. For example, 3124 is one
    possible permutation of the digits 1, 2, 3 and 4.
  If all of the permutations are listed numerically or alphabetically, we call
    it lexicographic order.

  The lexicographic permutations of 0, 1 and 2 are:
    012 021 102 120 201 210
  What is the millionth lexicographic permutation of the digits
    0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
*/
object Problem0024 extends Solveable{
  val NUMBER = 24

  def permute( body: String ): Stream[String] = {
    val list = body.toCharArray
    val len = list.length

    @tailrec
    def maxAsc( cur: Int, last:Option[Int] ):Option[Int] = {
      if ( cur >= len - 1 ){
        last
      }
      else if ( list(cur) < list(cur + 1) ){
        maxAsc( cur + 1, Some( cur ) )
      }
      else{
        maxAsc( cur + 1, last )
      }
    }

    @tailrec
    def maxUp( start: Int, cur: Int, last: Int ): Int = {
      if ( cur >= len ){
        last
      }
      else if ( list(start) < list(cur) ){
        maxUp( start, cur + 1, cur )
      }
      else{
        maxUp( start, cur + 1, last )
      }
    }

    def swapElements( first: Int, second: Int ) = {
      val tmp = list(first)
      list(first) = list(second)
      list(second) = tmp
    }

    @tailrec
    def reverseElements( start: Int, end: Int ){
      if ( start < end ){
        swapElements( start, end )
        reverseElements( start+1, end-1 )
      }
    }

    body #:: (
      maxAsc( 0, None ) match {
        case None =>
          Stream.empty
        case Some( k ) =>
          val l = maxUp( k, k + 2, k + 1 )

          swapElements( k, l )
          reverseElements( k+1, len-1 )

          permute( new String( list ) )
      }
    )
  }

  def solve() = {
    val res = permute( "0123456789" ).drop(999999).head
    String.valueOf( res )
  }
}

/**
  The Fibonacci sequence is defined by the recurrence relation:
  F(n) = F(n-1) + F(n-2), where F(1) = 1 and F(2) = 1.

  Hence the first 12 terms will be:

  F(1) = 1
  F(2) = 1
  F(3) = 2
  F(4) = 3
  F(5) = 5
  F(6) = 8
  F(7) = 13
  F(8) = 21
  F(9) = 34
  F(10) = 55
  F(11) = 89
  F(12) = 144

  The 12th term, F12, is the first term to contain three digits.

  What is the first term in the Fibonacci sequence to contain 1000 digits?
*/
object Problem0025 extends Solveable{
  val NUMBER = 25

  def solve() = {
    lazy val fib: Stream[BigInt] =
      1 #:: 1 #:: fib.zip(fib.tail).map(p => p._1 + p._2)

    def getFibCountBelowNDigits( n: Int ) = {
      val limit = BigInt(10) pow ( n - 1 )
      fib.takeWhile( _ < limit ).size + 1
    }

    val res = getFibCountBelowNDigits( 1000 )
    String.valueOf( res )
  }
}

/**
  A unit fraction contains 1 in the numerator.
  The decimal representation of the unit fractions with denominators 2 to 10 are
  given:

    1/2  =   0.5
    1/3  =   0.(3)
    1/4  =   0.25
    1/5  =   0.2
    1/6  =   0.1(6)
    1/7  =   0.(142857)
    1/8  =   0.125
    1/9  =   0.(1)
    1/10 =   0.1

  Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle.
  It can be seen that 1/7 has a 6-digit recurring cycle.

  Find the value of d < 1000 for which 1/d contains the longest recurring cycle
    in its decimal fraction part.
*/
object Problem0026 extends Solveable{
  val NUMBER = 26

  def solve() = {

    def isExactDivision( m: Int, n: Int ) = {
      try{
        BigDecimal( m ) / n
        true
      }
      catch{
        case e: ArithmeticException =>
          false
      }
    }

    def findMaxRecurringCycle( limit: Int ) = {
      def getShortestRecurringCycle( n: Int ): Option[Int] = {
        if ( isExactDivision( 1, n ) ){
          None
        }
        else{
          val limitContext = new java.math.MathContext( n << 2, java.math.RoundingMode.HALF_UP )

          val inv = BigDecimal( 1, limitContext ) / n
          val body = inv.toString.substring(2).dropRight( 1 )

          for ( prefix <- 0 to body.length; cycle <- 1 to n-1 ) {
            val sample = body.substring( prefix )
            val sN = sample.take( cycle ) * ( n / cycle + 1 )

            if ( sample.startsWith( sN ) ){
              return Some(cycle)
            }
          }
        }

        None
      }

      @tailrec
      def findShortestRecurringCycle( n: Int, maxCycle: Option[(Int,Int)] ):Option[(Int,Int)] = {
        if ( n <= 1 ){
          maxCycle
        }
        else getShortestRecurringCycle( n ) match {
          case Some(k) if ( k == n - 1 ) =>
            Some( n, k )
          case Some(k) if ( k >= maxCycle.getOrElse(0,0)._2 ) =>
            findShortestRecurringCycle( n - 1, Some( n, k + 1 ) )
          case _ =>
            findShortestRecurringCycle( n - 1, maxCycle )
        }
      }

      findShortestRecurringCycle( limit, None ).getOrElse(
          error( "No recurring cycles found!" ) )._1
    }

    val res = findMaxRecurringCycle( 999 )
    String.valueOf( res )
  }
}

/**
  Euler published the remarkable quadratic formula:
    n^2 + n + 41

  It turns out that the formula will produce 40 primes for the consecutive
    values n = 0 to 39. However, when n = 40, 40^2 + 40 + 41 = 40*(40 + 1) + 41
    is divisible by 41, and certainly when n = 41, 41^2 + 41 + 41 is clearly
    divisible by 41.

  Using computers, the incredible formula  n^2 − 79n + 1601 was discovered,
    which produces 80 primes for the consecutive values n = 0 to 79. The product
    of the coefficients, −79 and 1601, is −126479.

  Considering quadratics of the form:
    n^2 + a*n + b, where |a| < 1000 and |b| < 1000

  where |n| is the modulus/absolute value of n e.g. |11| = 11 and |−4| = 4

  Find the product of the coefficients, a and b, for the quadratic expression
    that produces the maximum number of primes for consecutive values of n,
    starting with n = 0.
*/
object Problem0027 extends Solveable{
  val NUMBER = 27

  def isPrime( p: Int ) = p match {
    case x if ( p < 2 ) => false
    case x => Problem0005.getPrimCount( x ).head._1 == x
  }

  def solve() = {

    def polyStream( a: Int, b: Int, n: Int = 0 ):Stream[Int] = {
      ( n*n + a*n + b ) #:: polyStream( a, b, n+1 )
    }

    def findABParams( limit: Int ) = {

      val priMap = new HashMap[Int,Boolean]()
      def cachedPrimeCheck( p: Int ) = {
        priMap.get( p ) match {
          case Some( p ) =>
            p
          case None =>
            val primality = isPrime( p )
            priMap(p) = primality
            primality
        }
      }

      def getMaxConsPrimes( a: Int, b: Int ) = {
        polyStream( a, b ) prefixLength( cachedPrimeCheck )
      }

      val rng = 1-limit to limit-1

      val maxCombination = (for( b <- rng if ( cachedPrimeCheck( b ) ); a <- rng if ( cachedPrimeCheck( a + b + 1 ) ) ) yield {
        (getMaxConsPrimes( a, b ),a,b)
      }).max

      maxCombination._2 * maxCombination._3
    }


    val res = findABParams( 1000 )
    String.valueOf( res )
  }
}

/**
  Starting with the number 1 and moving to the right in a clockwise direction a
    5 by 5 spiral is formed as follows:

    21 22 23 24 25
    20  7  8  9 10
    19  6  1  2 11
    18  5  4  3 12
    17 16 15 14 13

  It can be verified that the sum of the numbers on the diagonals is 101.

  What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral
    formed in the same way?
*/
object Problem0028 extends Solveable{
  val NUMBER = 28

  def solve() = {

    def calcSpiralDiagSum( limit: Int ) = {

      sealed trait Dir
      case object Up extends Dir
      case object Right extends Dir
      case object Down extends Dir
      case object Left extends Dir

      case class Pos( x: Int, y: Int ){
        def apply( d: Dir ) = d match {
          case Up =>    Pos( x,     y - 1 )
          case Right => Pos( x + 1, y     )
          case Down =>  Pos( x,     y + 1 )
          case Left =>  Pos( x - 1, y     )
        }

        def isDiag = math.abs( x ) == math.abs( y )
      }

      val spiral = new HashMap[Pos,Int]()

      @tailrec
      def snake( d: Dir, pos: Pos, cur: Int, limit: Int ) {
        if ( cur > limit ) return
        spiral( pos ) = cur

        d match{
          case Up if ( !spiral.contains( pos( Right ) ) ) =>
            snake( Right, pos( Right ), cur + 1, limit )
          case Right if ( !spiral.contains( pos( Down ) ) ) =>
            snake( Down, pos( Down ), cur + 1, limit )
          case Down if ( !spiral.contains( pos( Left ) ) ) =>
            snake( Left, pos( Left ), cur + 1, limit )
          case Left if ( !spiral.contains( pos( Up ) ) ) =>
            snake( Up, pos( Up ), cur + 1, limit )
          case _ =>
            snake( d, pos( d ), cur + 1, limit )
        }
      }

      val center = Pos( 0, 0 )
      spiral( center ) = 1
      snake( Down, center( Right ), 2, limit * limit )
      spiral.withFilter( _._1.isDiag ).map(_._2).sum
    }

    val res = calcSpiralDiagSum( 1001 )
    String.valueOf( res )
  }
}

/**
  Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

    2^2= 4, 2^3=  8, 2^4= 16, 2^5=  32
    3^2= 9, 3^3= 27, 3^4= 81, 3^5= 243
    4^2=16, 4^3= 64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

  If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
  4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

  How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
*/
object Problem0029 extends Solveable{
  val NUMBER = 29

  def solve() = {

    def countDistinctTerms( rng: Range ) = {
      val terms = for ( a <- rng; b <- rng ) yield BigInt( a ).pow( b )
      terms.distinct.size
    }

    val res = countDistinctTerms( 2 to 100 )
    String.valueOf( res )
  }
}

/**
  Surprisingly there are only three numbers that can be written as the sum of
    fourth powers of their digits:

    1634 = 1^4 + 6^4 + 3^4 + 4^4
    8208 = 8^4 + 2^4 + 0^4 + 8^4
    9474 = 9^4 + 4^4 + 7^4 + 4^4

  As 1 = 1^(4) is not a sum it is not included.
  The sum of these numbers is 1634 + 8208 + 9474 = 19316.

  Find the sum of all the numbers that can be written as the sum of fifth powers
    of their digits.
*/
object Problem0030 extends Solveable{
  val NUMBER = 30

  def solve() = {

    def calcSumOfDigitsToFifthPower( x: Int ) = {
      x.toString.toList.map( d => BigInt(d.asDigit).pow(5) ).sum
    }

    val max = ( "9" * calcSumOfDigitsToFifthPower( 1234567890 ).toString.length ) toInt

    val res = (2 to max).view.filter( i => calcSumOfDigitsToFifthPower( i ) == i ).sum
    String.valueOf( res )
  }
}

/**
  In England the currency is made up of pound, F, and pence, p, and there are
    eight coins in general circulation:

    1p, 2p, 5p, 10p, 20p, 50p, F1 (100p) and F2 (200p).

  It is possible to make F2 in the following way:
    1*F1 + 1*50p + 2*20p + 1*5p + 1*2p + 3*1p

  How many different ways can F2 be made using any number of coins?
*/
object Problem0031 extends Solveable{
  val NUMBER = 31

  def solve() = {

    val coins = List( 1, 2, 5, 10, 20, 50, 100, 200 )

    def fiddleChange( unresolvedCoins: List[Int], remainingSum: Int ):Int = {
      unresolvedCoins match {
        case cur :: rest =>
          cur match {
            case x if x == remainingSum =>
              1
            case x if x > remainingSum =>
              0
            case _ =>
              fiddleChange( unresolvedCoins, remainingSum - cur ) +
              fiddleChange( rest, remainingSum )
          }
        case _ =>
          0
      }
    }

    val res = fiddleChange( coins, 200 )
    String.valueOf( res )
  }
}

/**
  We shall say that an n-digit number is pandigital if it makes use of all the
    digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1
    through 5 pandigital.

  The product 7254 is unusual, as the identity, 39 * 186 = 7254, containing
    multiplicand, multiplier, and product is 1 through 9 pandigital.

  Find the sum of all products whose multiplicand/multiplier/product identity
    can be written as a 1 through 9 pandigital.

  HINT: Some products can be obtained in more than one way so be sure to only
    include it once in your sum.
*/
object Problem0032 extends Solveable{
  val NUMBER = 32

  val panDigits = 1 to 9 mkString

  def isPandigital( nS: String ) = {
    ( nS.length == panDigits.length ) &&
    ( nS.toList.sortBy(identity).mkString == panDigits )
  }

  def solve() = {

    def findPanDigitals( digits: String ) = {
      (2 to 9999).flatMap{ x =>
        (2 to 9999/x).view.filter{ y =>
          isPandigital( "%d%d%d".format( x, y, x*y ) ) }.map(x*_)
      }.distinct.sum
    }

    val res = findPanDigitals( "123456789" )
    String.valueOf( res )
  }
}

/**
  The fraction 49/98 is a curious fraction, as an inexperienced mathematician in
    attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is
    correct, is obtained by cancelling the 9s.

  We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
  There are exactly four non-trivial examples of this type of fraction, less
    than one in value, and containing two digits in the numerator and
    denominator.

  If the product of these four fractions is given in its lowest common terms,
    find the value of the denominator.
*/
object Problem0033 extends Solveable{
  val NUMBER = 33

  def solve() = {

    def findDenominatorOfCuriousFractions() = {

      val nd = (for ( n <- 1 to 8; d <- n+1 to 9;
            nx <- 10 to 98; dx <- nx+1 to 99;
            m <- 1 to 9 if ( n * dx == d * nx ) &&
             ( n.toString == nx.toString.replace( m.toString, "" ) ) &&
             ( d.toString == dx.toString.replace( m.toString, "" ) )
          ) yield ( n, d )
      ).reduceLeft{(nd1,nd2)=>(nd1._1 * nd2._1, nd1._2 * nd2._2)}

      nd._2 / nd._1
    }

    val res = findDenominatorOfCuriousFractions()
    String.valueOf( res )
  }
}

/**
  145 is a curious number, as
    1! + 4! + 5! = 1 + 24 + 120 = 145.

  Find the sum of all numbers which are equal to the sum of the factorial of
    their digits.

  Note: as 1! = 1 and 2! = 2 are not sums they are not included.
*/
object Problem0034 extends Solveable{
  val NUMBER = 34

  def solve() = {

    val f09 = Vector.empty ++ Problem0015.fact.take(10).map(_.toInt)

    def calcDigitFactSum( x: BigInt ) = {
      x.toString.toList.map(d=>f09(d.asDigit)).sum
    }

    def findLimit( length: Int ):BigInt = {
      val test = BigInt(f09(9)) * length

      if ( test.toString.length < length ){
        test
      }
      else{
        findLimit( length + 1 )
      }
    }

    val res = (for ( i <- BigInt(3) to findLimit( 0 ) if i == calcDigitFactSum( i ) ) yield i).sum
    String.valueOf( res )
  }
}

/**
  The number, 197, is called a circular prime because all rotations of the
    digits: 197, 971, and 719, are themselves prime.

  There are thirteen such primes below 100:
    2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

  How many circular primes are there below one million?
*/
object Problem0035 extends Solveable{
  val NUMBER = 35

  def solve() = {

    def rot( text: String ):Stream[String] = {
      val cur = text.tail + text.head
      cur #:: rot(cur)
    }

    def findCircularPrimes( limit: Int ) = {
      val primes = Problem0010.getPrimes( limit )
      primes.count{ n =>
        val cur = n.toString
        rot( cur ).view.take( cur.length ).map(_.toInt).forall(primes.contains(_))
      }
    }

    val res = findCircularPrimes( 1000000 )
    String.valueOf( res )
  }
}

/**
  The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.

  Find the sum of all numbers, less than one million, which are palindromic in
    base 10 and base 2.

  (Please note that the palindromic number, in either base, may not include
    leading zeros.)
*/
object Problem0036 extends Solveable{
  val NUMBER = 36

  def findPalindroms( limit: Int ) = {
   (1 until 1000000).view.filter(n=>{
     val s10 = n.toString
     (s10.reverse == s10) && {
       val s2 = BigInt(n).toString(2)
       s2.reverse == s2
     }
   }).sum
  }

  def solve() = {

    val res = findPalindroms( 1000000 )
    String.valueOf( res )
  }
}

/**
  The number 3797 has an interesting property. Being prime itself, it is
    possible to continuously remove digits from left to right, and remain prime
    at each stage: 3797, 797, 97, and 7. Similarly we can work from right to
    left: 3797, 379, 37, and 3.

  Find the sum of the only eleven primes that are both truncatable from left to
    right and right to left.

  NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
*/
object Problem0037 extends Solveable{
  val NUMBER = 37

  def solve() = {

    def isPrimeTruncatable( n: Int ) = {
      val nS = n.toString
      val len = nS.length
      val pad = List.fill(len-1){""}

      (pad ::: nS.toList.map(_.toString) ::: pad).
        sliding( len ).
        map( _.mkString.toInt ).
        forall( Problem0027.isPrime )
    }

    @tailrec
    def findTruncatablePrimesFrom( cur: Int, limit: Int, found: List[Int] = Nil ): List[Int] = {
      val primes = Problem0010.getPrimes( cur << 1 ).filter( p => ( p >= cur ) && isPrimeTruncatable( p ) ).toList
      val truncs = primes ::: found
      if ( truncs.size >= limit ){
        truncs
      }
      else{
        findTruncatablePrimesFrom( cur << 1, limit, truncs )
      }
    }

    val res = findTruncatablePrimesFrom( 11, 11 ).sum
    String.valueOf( res )
  }
}

/**
  Take the number 192 and multiply it by each of 1, 2, and 3:

  192 * 1 = 192
  192 * 2 = 384
  192 * 3 = 576

  By concatenating each product we get the 1 to 9 pandigital, 192384576. We will
    call 192384576 the concatenated product of 192 and (1,2,3)

  The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and
    5, giving the pandigital, 918273645, which is the concatenated product of 9
    and (1,2,3,4,5).

  What is the largest 1 to 9 pandigital 9-digit number that can be formed as the
    concatenated product of an integer with (1,2, ... , n) where n > 1?
 */
object Problem0038 extends Solveable{
  val NUMBER = 38

  def solve() = {

    @tailrec
    def buildConcatProduct( base: Int, n: Int = 1, cur: String = "" ): Option[Int] = {
      if ( cur.length > 9 ){
        None
      }
      else{
        val ncp = cur + base * n
        if ( Problem0032.isPandigital( ncp ) ){
          Some( ncp.toInt )
        }
        else{
          buildConcatProduct( base, n+1, ncp )
        }
      }
    }

    def findMaxPandigital() = {
      (1 to 9999).view.map(buildConcatProduct(_)).filter(_.isDefined).map(_.get).max
    }

    val res = findMaxPandigital()
    String.valueOf( res )
  }
}

/**
  If p is the perimeter of a right angle triangle with integral length sides,
    {a,b,c}, there are exactly three solutions for p = 120.

  {20,48,52}, {24,45,51}, {30,40,50}

  For which value of p <= 1000, is the number of solutions maximised?
 */
object Problem0039 extends Solveable{
  val NUMBER = 39

  def solve() = {

    def getRightTriangleSolutionCount( p: Int ) = {
      (1 to p >> 1).map{ a =>
        (a to p >> 1).count{ b =>
          val c = p - a - b
          a*a + b*b == c*c
        }
      }.sum
    }

    def findMaxRightTriangleSolutions( limit: Int ) = {
      (12 to 1000).map(n=>getRightTriangleSolutionCount(n)->n).max._2
    }

    val res = findMaxRightTriangleSolutions( 1000 )
    String.valueOf( res )
  }
}

/**
  An irrational decimal fraction is created by concatenating the positive
    integers:

    0.12345678910[1]112131415161718192021...

  It can be seen that the 12th digit of the fractional part is 1.
  If d(n) represents the n-th digit of the fractional part, find the value of the
    following expression.

  d(1) * d(10) * d(100) * d(1000) * d(10000) * d(100000) * d(1000000)
 */
object Problem0040 extends Solveable{
  val NUMBER = 40

  def solve() = {

    def findDigitsProduct( digits: Int* ) = {
      val max = digits.max

      @tailrec
      def buildDigits( cur: Int, sb: StringBuilder ): String = {
        if ( sb.length <= max ){
          sb.append( cur )
          buildDigits( cur+1, sb )
        }
        else{
          sb.result
        }
      }

      val str = buildDigits( 1, new StringBuilder(max,".") )
      digits.map( str(_).asDigit ).product
    }

    val res = findDigitsProduct( 1, 10, 100, 1000, 10000, 100000, 1000000 )
    String.valueOf( res )
  }
}

/**
  We shall say that an n-digit number is pandigital if it makes use of all the
    digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is
    also prime.

  What is the largest n-digit pandigital prime that exists?
 */
object Problem0041 extends Solveable{
  val NUMBER = 41

  def solve() = {

    def seekMaxPrimePermutations( n: Int ):Option[Int] = {

      val primes = Problem0010.getPrimes( "1"+"0"*n toInt )
      val digits = 1 to n mkString
      val rev = (n.toString*n toInt) + ("1"*n toInt)

      Problem0024.permute( digits ).
        map( rev-_.toInt ).
        find( primes )
    }

    // 1+2+..+9 % 9 = 0
    // 1+2+..+8 % 8 = 0

    val res = (7 to 4 by -1).view.map( seekMaxPrimePermutations ).find(_.isDefined).get.get
    String.valueOf( res )
  }
}

/**
  The n-th term of the sequence of triangle numbers is given by,
    t(n) = n(n+1)/2; so the first ten triangle numbers are:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  By converting each letter in a word to a number corresponding to its
    alphabetical position and adding these values we form a word value. For
    example, the word value for SKY is 19 + 11 + 25 = 55 = t(10). If the word
    value is a triangle number then we shall call the word a triangle word.

  Using words.txt, a 16K text file containing nearly two-thousand common English
    words, how many are triangle words?
*/
object Problem0042 extends Solveable{
  val NUMBER = 42

  // defined up to Int.MaxValue
  def toTria( n: Int ):Long =
    ( n + 1L ) * n >> 1

  def triangles( n: Int ): Stream[Long] = {
    toTria( n ) #:: triangles( n + 1 )
  }

  def solve() = {

    def countTriangleWords() = {
      val words = Problem0022.readWords( "res/Problem0042/words.txt" )
      val values = words.map( Problem0022.wordValue )
      val maxVal = values.max
      val triSet = triangles( 1 ).takeWhile( _ < maxVal ).map(_.toInt).toSet
      values.count( triSet )
    }

    val res = countTriangleWords()
    String.valueOf( res )
  }
}

/**
  The number, 1406357289, is a 0 to 9 pandigital number because it is made up of
    each of the digits 0 to 9 in some order, but it also has a rather
    interesting sub-string divisibility property.

  Let d(1) be the 1st digit, d(2) be the 2nd digit, and so on. In this way, we
    note the following:

  d(2)d(3)d( 4)=406 is divisible by 2
  d(3)d(4)d( 5)=063 is divisible by 3
  d(4)d(5)d( 6)=635 is divisible by 5
  d(5)d(6)d( 7)=357 is divisible by 7
  d(6)d(7)d( 8)=572 is divisible by 11
  d(7)d(8)d( 9)=728 is divisible by 13
  d(8)d(9)d(10)=289 is divisible by 17

  Find the sum of all 0 to 9 pandigital numbers with this property.
*/
object Problem0043 extends Solveable{
  val NUMBER = 43

  def solve() = {

    def sumPandigitals() = {
      val primes = Problem0010.getPrimes(18).toSeq.sortBy(identity)

      Problem0024.permute( 0 to 9 mkString ).filter(
        _.sliding(3).drop( 1 ).zip( primes.iterator ).forall( n => n._1.toInt % n._2 == 0 )
      ).map(_.toLong).sum
    }

    val res = sumPandigitals()
    String.valueOf( res )
  }
}

/**
  Pentagonal numbers are generated by the formula, P(n)=n*(3*n-1)/2. The first
    ten pentagonal numbers are:

  1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

  It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
    difference, 70 - 22 = 48, is not pentagonal.

  Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
    difference is pentagonal and D = |Pk - Pj| is minimised; what is the value
    of D?
*/
object Problem0044 extends Solveable{
  val NUMBER = 44

  // well defined up to Int.MaxValue
  def toPent( n: Int ) =
    (3L*n>>1)*n-(((n&1)-1)&(n>>1))

  def isPent( p: Long ) = {
    val n = math.round( ( math.sqrt( 24.*p + 1 ) - 1 ) / 6 ).toInt
    p == toPent( n )
  }

  def solve() = {
    def findMinPair( limit: Int ) = {
      val pentCache = (1 to limit).map(toPent).toIndexedSeq

      (for {
        a <- 0 until limit
        pa = pentCache( a )
        b <- a+1 until limit
        pb = pentCache( b )
        if isPent( pb-pa ) && isPent( pa+pb )
      } yield ( pb - pa )
      )min
    }

    // upper bound guess, duh
    val res = findMinPair( 10000 )
    String.valueOf( res )
  }
}

/**
  Triangle, pentagonal, and hexagonal numbers are generated by the following
    formulae:

  Triangle      T(n)=n(n+1)/2     1, 3,  6, 10, 15, ...
  Pentagonal    P(n)=n(3*n−1)/2   1, 5, 12, 22, 35, ...
  Hexagonal     H(n)=n(2*n−1)     1, 6, 15, 28, 45, ...

  It can be verified that T(285) = P(165) = H(143) = 40755.

  Find the next triangle number that is also pentagonal and hexagonal.
*/
object Problem0045 extends Solveable{
  val NUMBER = 45

  def solve() = {

    def toHexa( n: Int ) =
      ((n.toLong<<1)-1)*n

    def isHexa( p: Long ) = {
      val n = math.round( ( math.sqrt( 8.*p + 1 ) + 1 ) / 4 ).toInt
      p == toHexa( n )
    }

    def findTriPentHexa( start: Int ) = {
      Problem0042.triangles( start ).find{ n =>
        Problem0044.isPent( n ) && isHexa( n )
      }.get
    }

    val res = findTriPentHexa( 286 )
    String.valueOf( res )
  }
}

/**
  It was proposed by Christian Goldbach that every odd composite number can be
    written as the sum of a prime and twice a square.

     9 =  7 + 2*1^2
    15 =  7 + 2*2^2
    21 =  3 + 2*3^2
    25 =  7 + 2*3^2
    27 = 19 + 2*2^2
    33 = 31 + 2*1^2

  It turns out that the conjecture was false.

  What is the smallest odd composite that cannot be written as the sum of a
    prime and twice a square?
*/
object Problem0046 extends Solveable{
  val NUMBER = 46

  def solve() = {

    def getAntiConjectureNumber() = {
      Stream.from(9,2).filterNot(Problem0027.isPrime).find{ n =>
        !(Stream.from(1).map(s=>s*s<<1).takeWhile(_<n).
          find(sq=>Problem0027.isPrime(n-sq)).isDefined)
      }.get
    }

    val res = getAntiConjectureNumber()
    String.valueOf( res )
  }
}

/**
  The first two consecutive numbers to have two distinct prime factors are:

    14 = 2 * 7
    15 = 3 * 5

  The first three consecutive numbers to have three distinct prime factors are:

    644 = 2^2 * 7 * 23
    645 = 3 * 5 * 43
    646 = 2 * 17 * 19.

  Find the first four consecutive integers to have four distinct primes factors.
    What is the first of these numbers?
*/
object Problem0047 extends Solveable{
  val NUMBER = 47

  def solve() = {

    def findPrimeFactorGroupLeader( size: Int ) = {
      Stream.from(1).sliding(size).find{ nums =>
        nums.view.map(Problem0005.getPrimCount).forall(_.size>=size)
      }.get.head
    }

    val res = findPrimeFactorGroupLeader( 4 )
    String.valueOf( res )
  }
}

/**
  The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.

  Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
*/
object Problem0048 extends Solveable{
  val NUMBER = 48

  def solve() = {

    val res = (1 to 1000).map(n=>BigInt(n).pow(n)).sum.toString.takeRight(10)
    String.valueOf( res )
  }
}

/**
  The arithmetic sequence, 1487, 4817, 8147, in which each of the terms
    increases by 3330, is unusual in two ways: (i) each of the three terms are
    prime, and, (ii) each of the 4-digit numbers are permutations of one
    another.

  There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes,
    exhibiting this property, but there is one other 4-digit increasing
    sequence.

  What 12-digit number do you form by concatenating the three terms in this
    sequence?
*/
object Problem0049 extends Solveable{
  val NUMBER = 49

  def solve() = {

    def findPermutingPrimeSequence( start: Int ) = {
      val primes = Problem0010.getPrimes( 10000 ) -- (1 to 999)
      Stream.from(start).filter(primes).map{ n =>
        for {
          n2 <- primes
          delta = n2 - n
          n3 = n2 + delta
          ns = n.toString
          n2s = n2.toString
          n3s = n3.toString
          if ( delta > 0 ) && ( delta < (10000-n) / 2 ) &&
             primes.contains( n3 ) &&
             (ns.toSet == n2s.toSet ) && ( n2s.toSet == n3s.toSet )
        }
        yield ( ns + n2s + n3s )
      }.find{ k=> !k.isEmpty  }.get.head
    }

    val res = findPermutingPrimeSequence( 1488 )
    String.valueOf( res )
  }
}

/**
  The prime 41, can be written as the sum of six consecutive primes:
    41 = 2 + 3 + 5 + 7 + 11 + 13

  This is the longest sum of consecutive primes that adds to a prime below
    one-hundred.

  The longest sum of consecutive primes below one-thousand that adds to a prime,
    contains 21 terms, and is equal to 953.

  Which prime, below one-million, can be written as the sum of the most
    consecutive primes?
*/
object Problem0050 extends Solveable{
  val NUMBER = 50

  def solve() = {

    def calcMaxLen( pI: Iterator[Int], index: Int, remaining: Int ): Int = {
      if ( remaining < 0 ){
        index
      }
      else{
        calcMaxLen( pI, index + 1, remaining - pI.next )
      }
    }

    def findMaxPrime( limit: Int ) = {

      val primes = Problem0010.getPrimes( limit )
      val maxPrime = primes.last
      val maxLen = calcMaxLen( primes.iterator, 0, maxPrime )

      (maxLen to 1 by -1).view.map{ len =>
        primes.sliding( len ).map(_.sum).takeWhile(_<maxPrime).find(primes)
      }.find(!_.isEmpty).get.get
    }

    val res = findMaxPrime( 1000000 )
    String.valueOf( res )
  }
}
