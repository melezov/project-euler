package hr.element.pe.problems

import hr.element.pe.Solveable
import scala.annotation.tailrec

/**
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
*/
object Problem0001 extends Solveable{
  val NUMBER = 1

  def solve() = {
    val res = ( 1 until 1000 filter( n => ( n % 3 == 0 )  || ( n % 5 == 0 ) ) sum )
    String.valueOf( res )
  }
}

/**
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
*/
object Problem0002 extends Solveable{
  val NUMBER = 2

  def solve() = {
   @tailrec
    def fibSumEven( cur: Long, prev: Long, sum: Long, max: Long ):Long = {
      ( cur > max ) match{
        case true =>
          sum
        case false =>
          val even = ( cur & 1 ) == 0
          val newSum = if ( even ) sum + cur else sum

          fibSumEven( cur + prev, cur, newSum, max )
      }
    }

    val res = fibSumEven( 1, 1, 0, 4000000 )
    String.valueOf( res )
  }
}

/**
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
object Problem0003 extends Solveable{
  val NUMBER = 3

  def solve() = {

    @tailrec
    def maxPrime( cur: Int, num: Long, max: Option[Int] ):Int = {
      ( cur > num ) match {
        case true =>
          max.getOrElse( 1 )
        case false =>
          num % cur == 0 match {
            case true =>
              maxPrime( cur, num / cur, Some( cur ) )
            case false =>
              maxPrime( cur + 1, num, max )
          }
      }
    }

    val res = maxPrime( 2, 600851475143L, None )
    String.valueOf( res )
  }
}

/**
  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
object Problem0004 extends Solveable{
  val NUMBER = 4

  def solve() = {
    val res = "?"
    String.valueOf( res )
  }
}

