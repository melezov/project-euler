package hr.element.pe.problems

import hr.element.pe.Solveable
import scala.annotation.tailrec
import scala.collection.mutable.ArrayBuffer


/**
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
*/
object Problem0001 extends Solveable{
  val NUMBER = 1

/**
  See explanation of view:
  http://www.scala-lang.org/docu/files/collections-api/collections_42.html
*/
  def solve() = {

    val res = (1 until 1000).view.filter( n => ( n % 3 == 0 ) || ( n % 5 == 0 ) ).sum
    String.valueOf( res )
  }
}

/**
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
*/
object Problem0002 extends Solveable{
  val NUMBER = 2
/**
  Demonstration of named parameter usage ( prev = cur )
*/
  def solve() = {

    @tailrec
    def fibSumEven( cur: Long, prev: Long, sum: Long, max: Long ):Long = {
      ( cur > max ) match{
        case true =>
          sum
        case false =>
          fibSumEven(
              cur = cur + prev,
              prev = cur,
              sum = if ( ( cur & 1 ) == 0 ) sum + cur else sum,
              max = max
          )
      }
    }

    val res = fibSumEven( 1, 1, 0, 4000000 )
    String.valueOf( res )
  }
}

/**
  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
object Problem0003 extends Solveable{
  val NUMBER = 3

  def solve() = {

    @tailrec
    def maxPrime( cur: Int, num: Long, max: Option[Int] ):Int = {
      ( cur > num ) match {
        case true =>
          max.getOrElse( 1 )
        case false =>
          num % cur == 0 match {
            case true =>
              maxPrime( cur, num / cur, Some( cur ) )
            case false =>
              maxPrime( cur + 1, num, max )
          }
      }
    }

    val res = maxPrime( 2, 600851475143L, None )
    String.valueOf( res )
  }
}

/**
  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
object Problem0004 extends Solveable{
  val NUMBER = 4

  def solve() = {

    def numPal( p: Long ) = p.toString == p.toString.reverse

    def findMaxPal( from: Int, to: Int ) = {
      val rng = from to to
      ( for( x <- rng; y <- rng if numPal( x * y ) ) yield x * y ) max
    }

    val res = findMaxPal( 100, 999 )
    String.valueOf( res )
  }
}

/**
  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
object Problem0005 extends Solveable{
  val NUMBER = 5

  def solve() = {

    def getPrimCount( num: Int ) = {
      @tailrec
      def getPrim( n: Int, cur: Int ):List[Int] = {
        cur match {
          case x if ( x >= n ) =>
            n :: Nil
          case x if ( n % x == 0 ) =>
            x :: getPrim( n / x, x )
          case x =>
            getPrim( n, x + 1 )
        }
      }

      getPrim( num, 2 ) groupBy( identity ) mapValues( _.length )
    }

    def getMaxPrimCounts( r: Range ) =
      r flatMap getPrimCount groupBy( _._1 ) mapValues( _.map(_._2).max )

    val res = (getMaxPrimCounts( 1 to 20 ) map( ep => BigInt( ep._1 ).pow( ep._2 ) ) product)
    String.valueOf( res )
  }
}

/**
  The sum of the squares of the first ten natural numbers is, 1^(2) + 2^(2) + ... + 10^(2) = 385
  The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^(2) = 55^(2) = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
  Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
object Problem0006 extends Solveable{
  val NUMBER = 6

  def solve() = {

    def sumSqList( numList: Seq[Int] ):Long = numList map( n => n*n ) sum
    def sqListSum( numList: Seq[Int] ):Long = BigInt( numList sum ).pow(2).toLong

    val rng = 1 to 100
    val delta = sumSqList( rng ) - sqListSum( rng )

    val res = math.abs( delta )
    String.valueOf( res )
  }
}

/**
  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10001st prime number?
*/
object Problem0007 extends Solveable{
  val NUMBER = 7

  def solve() = {

    def findNthPrime( n: Int ) = {
      @tailrec
      def findNthPrime( cur: Int, primesSoFar: ArrayBuffer[Int] ):Int = {
        val isPrime = primesSoFar.forall( cur % _ != 0 )
        isPrime match {
          case true =>
            if ( primesSoFar.size + 1 == n ) {
              cur
            }
            else{
              findNthPrime( cur + 1, primesSoFar += cur )
            }
          case false =>
            findNthPrime( cur + 1, primesSoFar )
        }
      }

      findNthPrime( 2, new ArrayBuffer[Int](n) )
    }

    val res = findNthPrime( 10001 )
    String.valueOf( res )
  }
}

/**
Find the greatest product of five consecutive digits in the 1000-digit number.

7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
*/
object Problem0008 extends Solveable{
  val NUMBER = 8

/**
  Usage of "sliding"
 */
  def solve() = {

    val num = """
      7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
      8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
      6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
      3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
      6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
      5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
      8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
      1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
      0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
      0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    """.replaceAll( "\\D", "" )

    val res = (num.toList.map(_.asDigit).sliding(5).map( _.product).max)
    String.valueOf( res )
  }
}

/**
  A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2
  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
  There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.
*/
object Problem0009 extends Solveable{
  val NUMBER = 9

  def solve() = {

    def seekPitSum( sum: Int ) = {

      @tailrec
      def seekPit( a: Int, b: Int ):Long = {
        val c = sum - a - b
        if ( b < c ){
          if ( a*a + b*b == c*c ) {
            a*b*c
          }
          else{
            seekPit( a, b+1 )
          }
        }
        else{
          if ( a == sum ) error( "No solution can be found!" )
          seekPit( a+1, a+2 )
        }
      }

      seekPit( 1, 2 )
    }

    val res = seekPitSum( 1000 )
    String.valueOf( res )
  }
}

/**
  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*/
object Problem0010 extends Solveable{
  val NUMBER = 10

  def solve() = {

    def sumPrimes( limit: Int ) = {
      val primes = ((for (i<-0 until limit) yield i) toArray)

      for( cur <- 2 until limit if ( primes(cur) != 0 )){
        for( es <- cur + cur until limit by cur ) primes( es ) = 0
      }

      ( 0L /: primes ){_+_} - 1 // compensation for non-prime "1"
    }

    val res = sumPrimes( 2000000 )
    String.valueOf( res )
  }
}

/**
  In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

  08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
  32 98 81 28 64 23 67 10[26]38 40 67 59 54 70 66 18 38 64 70
  67 26 20 68 02 62 12 20 95[63]94 39 63 08 40 91 66 49 94 21
  24 55 58 05 66 73 99 26 97 17[78]78 96 83 14 88 34 89 63 72
  21 36 23 09 75 00 76 44 20 45 35[14]00 61 33 97 34 31 33 95
  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

  The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
  What is the greatest product of four adjacent numbers in any direction (up, down, left, right, or diagonally) in the 20×20 grid?
*/
object Problem0011 extends Solveable{
  val NUMBER = 11

  def solve() = {

    val field = """
      08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
      49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
      81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
      52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
      22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
      24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
      32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
      67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
      24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
      21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
      78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
      16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
      86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
      19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
      04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
      88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
      04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
      20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
      20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
      01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    """
      .split( "[\\r\\n]+" ).map( _.trim ).filter( !_.isEmpty )
      .map( _.split( ' ' ).map( _.toInt ) toList ) toList

    val paddedField = {
      val padCol = List.fill(3){1}
      val padBlock = List.fill(3){List.fill(20){1}}
      field ::: padBlock map( _ ::: padCol )
    }

    val res = (paddedField sliding(4) map { rW =>
      (for( x <- 0 until 20 ) yield {
        val hMul = rW(0) drop(x) take(4) product
        val vMul = rW.map( _(x) ) product
        val dBsMul = (for( i <- 0 to 3 ) yield rW(i)(x+i)) product
        val dSlMul = (for( i <- 0 to 3 ) yield rW(3-i)(x+i)) product

        List( hMul, vMul, dBsMul, dSlMul ) max
      }) max
    } toList) max

    String.valueOf( res )
  }
}

/**
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
  The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.
  What is the value of the first triangle number to have over five hundred divisors?
*/
object Problem0012 extends Solveable{
  val NUMBER = 12

  def solve() = {

    val res = "?"
    String.valueOf( res )
  }
}
